import random
import requests
import polars as pl
from datetime import datetime, timedelta
from typing import List, Dict

# –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –¥–ª—è COVID-19 –¥–∞–Ω–Ω—ã—Ö
SAMPLE_LOCATIONS = [
    'US', 'GB', 'DE', 'FR', 'IT', 'ES', 'RU', 'CN', 'JP', 'KR',
    'BR', 'IN', 'CA', 'AU', 'MX', 'AR', 'TR', 'SA', 'ZA', 'EG'
]

def load_covid_real_data(limit: int = 10000, start_date: str = None, locations_filter: List[str] = None) -> List[Dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ COVID-19 –∏–∑ Google Cloud Storage —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Polars –∏ lazy evaluation.
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        start_date: –î–∞—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
        locations_filter: –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π COVID-19
    """
    try:
        if start_date:
            print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Polars lazy evaluation (–ø–æ—Å–ª–µ {start_date}, –ª–∏–º–∏—Ç {limit}, —Å—Ç—Ä–∞–Ω—ã: {locations_filter or '–≤—Å–µ'})...")
        else:
            print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Polars lazy evaluation (–ª–∏–º–∏—Ç {limit}, —Å—Ç—Ä–∞–Ω—ã: {locations_filter or '–≤—Å–µ'})...")
            
        url = "https://storage.googleapis.com/covid19-open-data/v3/epidemiology.csv"
        print(f"   URL: {url}")
        
        print("   –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ lazy query —Å pushdown —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º lazy dataframe —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ö–µ–º—ã
        lazy_df = pl.scan_csv(url, try_parse_dates=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å pushdown –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        print("   –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        
        # –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ date –∏ location_key
        lazy_df = lazy_df.filter(
            pl.col("date").is_not_null() & 
            pl.col("location_key").is_not_null()
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (pushdown)
        if start_date:
            print(f"   ...—Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ > {start_date}")
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            start_date_dt = pl.datetime(int(start_date[:4]), int(start_date[5:7]), int(start_date[8:10]))
            lazy_df = lazy_df.filter(pl.col("date") > start_date_dt)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (pushdown) 
        if locations_filter:
            print(f"   ...—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–∞–º: {locations_filter}")
            lazy_df = lazy_df.filter(pl.col("location_key").is_in(locations_filter))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        lazy_df = lazy_df.sort(["date", "location_key"])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç (pushdown)
        if limit:
            lazy_df = lazy_df.limit(limit)
        
        print("   –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ lazy query —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º lazy query - –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—è –º–∞–≥–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        df = lazy_df.collect()
        
        if df.height == 0:
            print("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            return []
        
        print("   –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = ['new_confirmed', 'new_deceased', 'new_recovered', 'new_tested', 
                       'cumulative_confirmed', 'cumulative_deceased', 'cumulative_recovered', 'cumulative_tested']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
        existing_numeric_cols = [col for col in numeric_cols if col in df.columns]
        
        if existing_numeric_cols:
            df = df.with_columns([
                pl.col(col).fill_null(0).cast(pl.Int64, strict=False) for col in existing_numeric_cols
            ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ YYYY-MM-DD
        df = df.with_columns([
            pl.col("date").dt.strftime("%Y-%m-%d").alias("date")
        ])
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {df.height} –∑–∞–ø–∏—Å–µ–π —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 —Å Polars")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        return df.to_dicts()
        
    except Exception as e:
        import traceback
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Polars: {e}")
        print(traceback.format_exc())
        print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        return load_covid_sample_data(limit)

def load_covid_sample_data(limit: int = 1000) -> List[Dict]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö COVID-19 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π COVID-19
    """
    print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {limit} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π COVID-19...")
    
    base_date = datetime(2020, 3, 1)
    sample_data = []
    
    for i in range(limit):
        # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ –ø–∞–Ω–¥–µ–º–∏–∏
        days_offset = i % 1000  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ ~3 –≥–æ–¥–∞–º
        date = base_date + timedelta(days=days_offset)
        
        # –°–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è
        location = random.choice(SAMPLE_LOCATIONS)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ COVID-19
        # –ù–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å —Ç—Ä–µ–Ω–¥–æ–º (–±–æ–ª—å—à–µ –≤ –Ω–∞—á–∞–ª–µ –ø–∞–Ω–¥–µ–º–∏–∏)
        base_new = max(0, random.randint(0, 50000) - days_offset * 10)
        
        new_confirmed = max(0, base_new + random.randint(-base_new//4, base_new//4))
        new_deceased = max(0, int(new_confirmed * random.uniform(0.005, 0.05)))  # 0.5-5% CFR
        new_recovered = max(0, int(new_confirmed * random.uniform(0.7, 0.95)))   # 70-95% recovery
        new_tested = max(new_confirmed, int(new_confirmed * random.uniform(5, 20)))  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–µ
        
        # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞—Å—Ç—É—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º)
        cumulative_multiplier = 1 + days_offset * 0.1
        cumulative_confirmed = max(new_confirmed, int(new_confirmed * cumulative_multiplier))
        cumulative_deceased = max(new_deceased, int(new_deceased * cumulative_multiplier))  
        cumulative_recovered = max(new_recovered, int(new_recovered * cumulative_multiplier))
        cumulative_tested = max(new_tested, int(new_tested * cumulative_multiplier))
        
        record = {
            'date': date.strftime('%Y-%m-%d'),
            'location_key': location,
            'new_confirmed': new_confirmed,
            'new_deceased': new_deceased,
            'new_recovered': new_recovered,
            'new_tested': new_tested,
            'cumulative_confirmed': cumulative_confirmed,
            'cumulative_deceased': cumulative_deceased,
            'cumulative_recovered': cumulative_recovered,
            'cumulative_tested': cumulative_tested
        }
        sample_data.append(record)
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(sample_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π COVID-19")
    return sample_data

def get_daily_record(record: Dict) -> Dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–∏–∫–∞ covid_daily_1min (–Ω–æ–≤—ã–µ —Å–ª—É—á–∞–∏)
    
    Args:
        record: –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å COVID-19
    
    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è Kafka
    """
    return {
        'date': record['date'],
        'location_key': record['location_key'],
        'new_confirmed': record.get('new_confirmed', 0),
        'new_deceased': record.get('new_deceased', 0),
        'new_recovered': record.get('new_recovered', 0),
        'new_tested': record.get('new_tested', 0)
    }

def get_cumulative_record(record: Dict) -> Dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–∏–∫–∞ covid_cumulative_5min (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    
    Args:
        record: –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å COVID-19
    
    Returns:
        Dict: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Kafka
    """
    return {
        'date': record['date'],
        'location_key': record['location_key'],
        'cumulative_confirmed': record.get('cumulative_confirmed', 0),
        'cumulative_deceased': record.get('cumulative_deceased', 0),
        'cumulative_recovered': record.get('cumulative_recovered', 0),
        'cumulative_tested': record.get('cumulative_tested', 0)
    }

def filter_by_location(data: List[Dict], locations: List[str] = None) -> List[Dict]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∫—É –ª–æ–∫–∞—Ü–∏–π
    
    Args:
        data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        locations: –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    
    Returns:
        List[Dict]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    if not locations:
        return data
    
    filtered = [record for record in data if record['location_key'] in locations]
    print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ª–æ–∫–∞—Ü–∏–π: {locations}")
    return filtered

def filter_by_date_range(data: List[Dict], start_date: str = None, end_date: str = None) -> List[Dict]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    
    Args:
        data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
    
    Returns:
        List[Dict]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    filtered = data
    
    if start_date:
        filtered = [record for record in filtered if record['date'] >= start_date]
    
    if end_date:
        filtered = [record for record in filtered if record['date'] <= end_date]
    
    if start_date or end_date:
        print(f"üìÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {start_date} - {end_date}")
    
    return filtered

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö COVID-19 ===")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞)
    real_data = load_covid_real_data(limit=100)
    
    if real_data:
        print(f"–ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
        print(real_data[0])
        
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–∏–∫–∞ covid_daily_1min:")
        print(get_daily_record(real_data[0]))
        
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–∏–∫–∞ covid_cumulative_5min:")
        print(get_cumulative_record(real_data[0]))
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n=== –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
    sample_data = load_covid_sample_data(limit=50)
    
    if sample_data:
        print(f"–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:")
        print(sample_data[0])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        us_data = filter_by_location(sample_data, ['US', 'GB'])
        print(f"–ó–∞–ø–∏—Å–µ–π –¥–ª—è US –∏ GB: {len(us_data)}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
        recent_data = filter_by_date_range(sample_data, start_date='2020-06-01')
        print(f"–ó–∞–ø–∏—Å–µ–π —Å –∏—é–Ω—è 2020: {len(recent_data)}")
