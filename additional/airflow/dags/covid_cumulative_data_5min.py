from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from covid_producer import CovidDataProducer
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è DAG
default_args = {
    'owner': 'hw17-covid-cumulative',
    'depends_on_past': False,
    'start_date': datetime(2025, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=2),
    'max_active_runs': 1,  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
}

def produce_cumulative_data(**context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 –≤ Kafka —Ç–æ–ø–∏–∫ covid_cumulative_data_5min
    
    –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç:
    - date: –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
    - location_key: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω–∞
    - cumulative_confirmed: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏
    - cumulative_deceased: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏  
    - cumulative_recovered: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏–µ
    - cumulative_tested: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        broker_url = context.get('params', {}).get('broker_url', 'kafka:9092')
        batch_size = context.get('params', {}).get('batch_size', 5)
        topic = context.get('params', {}).get('topic', 'covid_cumulative_data_5min')
        use_real_data = context.get('params', {}).get('use_real_data', False)
        locations_filter = context.get('params', {}).get('locations_filter', 
                                                         ['US', 'GB', 'DE', 'FR', 'IT', 'ES', 'RU'])
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19")
        print(f"   Broker: {broker_url}")
        print(f"   Topic: {topic}")
        print(f"   Batch size: {batch_size}")
        print(f"   Real data: {use_real_data}")
        print(f"   Locations filter: {locations_filter}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä
        producer = CovidDataProducer(
            broker_url=broker_url,
            use_real_data=use_real_data,
            data_limit=3000  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sent_count = producer.send_cumulative_data_batch(
            topic=topic,
            batch_size=batch_size,
            locations_filter=locations_filter
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞
        stats = producer.get_stats()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä
        producer.close()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫ {topic}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è XCom –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        return {
            'sent_count': sent_count,
            'topic': topic,
            'batch_size': batch_size,
            'data_type': 'cumulative',
            'timestamp': datetime.now().isoformat(),
            'locations_count': len(locations_filter),
            'producer_stats': stats,
            'broker_url': broker_url
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥—å—é—Å–µ—Ä–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19: {e}")
        raise

def check_topic_availability(**context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞ covid_cumulative_data_5min –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    from kafka import KafkaProducer
    from kafka.errors import NoBrokersAvailable
    
    broker_url = context.get('params', {}).get('broker_url', 'kafka:9092')
    topic = context.get('params', {}).get('topic', 'covid_cumulative_data_5min')
    
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ø–∏–∫–∞ {topic}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        producer = KafkaProducer(
            bootstrap_servers=[broker_url],
            request_timeout_ms=5000,
            api_version=(0, 10, 1)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–ø–æ—Å–æ–±)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ KafkaAdminClient
            from kafka import KafkaAdminClient
            admin_client = KafkaAdminClient(
                bootstrap_servers=[broker_url],
                request_timeout_ms=5000,
                api_version=(0, 10, 1)
            )
            metadata = admin_client.list_topics()
            available_topics = list(metadata)
            admin_client.close()
        except Exception:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ consumer
            from kafka import KafkaConsumer
            consumer = KafkaConsumer(
                bootstrap_servers=[broker_url],
                request_timeout_ms=5000,
                api_version=(0, 10, 1)
            )
            available_topics = list(consumer.topics())
            consumer.close()
        
        producer.close()
        
        topic_available = topic in available_topics
        
        if topic_available:
            print(f"‚úÖ –¢–æ–ø–∏–∫ {topic} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
        else:
            print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ {topic} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø–∏–∫–∏: {available_topics}")
        
        return {
            'topic': topic,
            'topic_available': topic_available,
            'available_topics': available_topics,
            'broker_url': broker_url,
            'check_status': 'success' if topic_available else 'warning'
        }
        
    except NoBrokersAvailable:
        print(f"‚ùå Kafka –±—Ä–æ–∫–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {broker_url}")
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ø–∏–∫–∞: {e}")
        raise

def validate_cumulative_data(**context):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    produce_result = context['task_instance'].xcom_pull(task_ids='produce_cumulative_data')
    
    if not produce_result:
        raise ValueError("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    sent_count = produce_result.get('sent_count', 0)
    batch_size = produce_result.get('batch_size', 0)
    
    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if sent_count == batch_size:
        print(f"‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        validation_status = 'success'
    elif sent_count > 0:
        print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ: {sent_count}/{batch_size}")
        validation_status = 'partial'
    else:
        print(f"‚ùå –ù–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        validation_status = 'failed'
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    data_type = produce_result.get('data_type')
    if data_type != 'cumulative':
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data_type}")
    
    return {
        'validation_status': validation_status,
        'expected_count': batch_size,
        'actual_count': sent_count,
        'success_rate': (sent_count / batch_size * 100) if batch_size > 0 else 0,
        'data_type': data_type,
        'validation_timestamp': datetime.now().isoformat()
    }

# –°–æ–∑–¥–∞–Ω–∏–µ DAG
dag = DAG(
    'covid_cumulative_data_5min',
    default_args=default_args,
    description='–ü—Ä–æ–¥—å—é—Å–µ—Ä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç',
    schedule="*/5 * * * *",  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ :00 —Å–µ–∫—É–Ω–¥ (00:05:00, 00:10:00, etc.)
    catchup=False,
    max_active_runs=1,
    tags=['covid19', 'kafka', 'producer', 'cumulative', '5min', 'hw17'],
    params={
        'broker_url': 'kafka:9092',
        'topic': 'covid_cumulative_data_5min', 
        'batch_size': 5,
        'use_real_data': False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        'locations_filter': ['US', 'GB', 'DE', 'FR', 'IT', 'ES', 'RU']
    },
    doc_md="""
    ## COVID-19 Cumulative Data Producer DAG (5min)
    
    –ü—Ä–æ–¥—å—é—Å–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 –≤ Kafka —Ç–æ–ø–∏–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    
    ### –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
    - **date**: –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    - **location_key**: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: US, GB, DE)
    - **cumulative_confirmed**: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –Ω–∞—á–∞–ª–∞ –ø–∞–Ω–¥–µ–º–∏–∏
    - **cumulative_deceased**: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –Ω–∞—á–∞–ª–∞ –ø–∞–Ω–¥–µ–º–∏–∏
    - **cumulative_recovered**: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏–µ —Å –Ω–∞—á–∞–ª–∞ –ø–∞–Ω–¥–µ–º–∏–∏
    - **cumulative_tested**: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –Ω–∞—á–∞–ª–∞ –ø–∞–Ω–¥–µ–º–∏–∏
    
    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **broker_url**: –∞–¥—Ä–µ—Å Kafka –±—Ä–æ–∫–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kafka:9092)
    - **topic**: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: covid_cumulative_data_5min)
    - **batch_size**: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
    - **use_real_data**: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ COVID-19 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: False)
    - **locations_filter**: —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    ### –ü—Ä–∏–º–µ—Ä JSON —Å–æ–æ–±—â–µ–Ω–∏—è:
    ```json
    {
        "date": "2020-03-15",
        "location_key": "US", 
        "cumulative_confirmed": 123456,
        "cumulative_deceased": 4567,
        "cumulative_recovered": 98765,
        "cumulative_tested": 1234567
    }
    ```
    
    ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –Ω–∞—á–∞–ª–∞ –ø–∞–Ω–¥–µ–º–∏–∏
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–∂–µ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç) –∏–∑-–∑–∞ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    - –í–∫–ª—é—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
)

# –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ø–∏–∫–∞
check_topic_task = PythonOperator(
    task_id='check_topic_availability',
    python_callable=check_topic_availability,
    dag=dag,
    doc_md="""
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞ covid_cumulative_data_5min –≤ Kafka –∫–ª–∞—Å—Ç–µ—Ä–µ.
    –ï—Å–ª–∏ —Ç–æ–ø–∏–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–¥–∞—á–∞ –≤—ã–≤–µ–¥–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ —É–ø–∞–¥–µ—Ç.
    """
)

# –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
produce_task = PythonOperator(
    task_id='produce_cumulative_data',
    python_callable=produce_cumulative_data,
    dag=dag,
    doc_md="""
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 –≤ Kafka —Ç–æ–ø–∏–∫.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CovidDataProducer –¥–ª—è:
    1. –ó–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 (—Ä–µ–∞–ª—å–Ω—ã—Ö –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö)
    2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º/—Ä–µ–≥–∏–æ–Ω–∞–º
    3. –û—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤ Kafka
    4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
)

# –ó–∞–¥–∞—á–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
validate_task = PythonOperator(
    task_id='validate_cumulative_data',
    python_callable=validate_cumulative_data,
    dag=dag,
    doc_md="""
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–∂–∏–¥–∞–µ–º–æ–º—É
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
check_topic_task >> produce_task >> validate_task