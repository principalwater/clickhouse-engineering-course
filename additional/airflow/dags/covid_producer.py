import time
import json
import argparse
from datetime import datetime
from typing import List, Dict, Optional
from kafka import KafkaProducer
from kafka.errors import NoBrokersAvailable, KafkaError
from covid_schemas import (
    load_covid_real_data, 
    load_covid_sample_data, 
    get_daily_record, 
    get_cumulative_record,
    filter_by_location,
    filter_by_date_range
)

class CovidDataProducer:
    """
    –ü—Ä–æ–¥—å—é—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö COVID-19 –¥–ª—è Apache Kafka
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–æ–ø–∏–∫–∏:
    - covid_daily_1min: –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è  
    - covid_cumulative_5min: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    
    def __init__(self, 
                 broker_url: str = 'kafka:9092',
                 use_real_data: bool = True,
                 data_limit: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞
        
        Args:
            broker_url: URL Kafka –±—Ä–æ–∫–µ—Ä–∞
            use_real_data: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (True) –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ (False)
            data_limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        self.broker_url = broker_url
        self.use_real_data = use_real_data
        self.data_limit = data_limit
        
        print(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CovidDataProducer")
        print(f"   Broker: {broker_url}")
        print(f"   –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {use_real_data}")
        print(f"   –õ–∏–º–∏—Ç –¥–∞–Ω–Ω—ã—Ö: {data_limit}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä
        self.producer = self._create_producer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.data_source = self._load_data()
        self.data_index = 0
        
        print(f"‚úÖ –ü—Ä–æ–¥—å—é—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.data_source)} –∑–∞–ø–∏—Å—è–º–∏")
    
    def _create_producer(self) -> KafkaProducer:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Kafka –ø—Ä–æ–¥—å—é—Å–µ—Ä —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        producer_config = {
            'bootstrap_servers': [self.broker_url],
            'value_serializer': lambda v: json.dumps(v, ensure_ascii=False).encode('utf-8'),
            'key_serializer': lambda v: v.encode('utf-8') if v else None,
            'retries': 5,
            'retry_backoff_ms': 1000,
            'batch_size': 16384,
            'linger_ms': 10,
            'buffer_memory': 33554432
        }
        
        max_retries = 10
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                producer = KafkaProducer(**producer_config)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka –±—Ä–æ–∫–µ—Ä—É {self.broker_url}")
                return producer
                
            except NoBrokersAvailable:
                retry_count += 1
                wait_time = min(10 * retry_count, 60)
                print(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–æ–∫–µ—Ä–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}. "
                      f"–ñ–¥–µ–º {wait_time}—Å...")
                time.sleep(wait_time)
                
            except Exception as e:
                retry_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka: {e}. "
                      f"–ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}")
                time.sleep(5)
        
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    
    def _load_data(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ COVID-19"""
        if self.use_real_data:
            return load_covid_real_data(limit=self.data_limit)
        else:
            return load_covid_sample_data(limit=self.data_limit)
    
    def _send_message(self, topic: str, message: Dict, key: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka —Ç–æ–ø–∏–∫
        
        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            message: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            key: –ö–ª—é—á —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ location_key –∏ date –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not key and 'location_key' in message and 'date' in message:
                key = f"{message['location_key']}_{message['date']}"
            
            future = self.producer.send(topic, value=message, key=key)
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            record_metadata = future.get(timeout=10)
            
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {topic}: {message['location_key']} {message['date']} "
                  f"(partition={record_metadata.partition}, offset={record_metadata.offset})")
            return True
            
        except KafkaError as e:
            print(f"‚ùå Kafka –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {topic}: {e}")
            return False
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {topic}: {e}")
            return False
    
    def send_daily_data_batch(self, 
                              topic: str = 'covid_daily_1min', 
                              batch_size: int = 10,
                              locations_filter: List[str] = None) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ COVID-19 –≤ —Ç–æ–ø–∏–∫
        
        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            locations_filter: –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ COVID-19 (—Ä–∞–∑–º–µ—Ä: {batch_size})")
        
        sent_count = 0
        batch_data = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö
        attempts = 0
        max_attempts = batch_size * 10  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        
        while len(batch_data) < batch_size and attempts < max_attempts:
            if self.data_index >= len(self.data_source):
                self.data_index = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            
            record = self.data_source[self.data_index]
            self.data_index += 1
            attempts += 1
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
            if locations_filter and record['location_key'] not in locations_filter:
                continue
                
            daily_record = get_daily_record(record)
            batch_data.append(daily_record)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á
        for record in batch_data:
            if self._send_message(topic, record):
                sent_count += 1
        
        self.producer.flush()
        print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(batch_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤")
        return sent_count
    
    def send_cumulative_data_batch(self, 
                                   topic: str = 'covid_cumulative_5min', 
                                   batch_size: int = 5,
                                   locations_filter: List[str] = None) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 –≤ —Ç–æ–ø–∏–∫
        
        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞  
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            locations_filter: –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19 (—Ä–∞–∑–º–µ—Ä: {batch_size})")
        
        sent_count = 0
        batch_data = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö
        attempts = 0
        max_attempts = batch_size * 10  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        
        while len(batch_data) < batch_size and attempts < max_attempts:
            if self.data_index >= len(self.data_source):
                self.data_index = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            
            record = self.data_source[self.data_index]
            self.data_index += 1
            attempts += 1
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
            if locations_filter and record['location_key'] not in locations_filter:
                continue
                
            cumulative_record = get_cumulative_record(record)
            batch_data.append(cumulative_record)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á
        for record in batch_data:
            if self._send_message(topic, record):
                sent_count += 1
        
        self.producer.flush()
        print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(batch_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return sent_count
    
    def run_daily_producer(self, 
                           topic: str = 'covid_daily_1min',
                           batch_size: int = 10, 
                           interval_seconds: int = 60,
                           max_iterations: int = None,
                           locations_filter: List[str] = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–¥—å—é—Å–µ—Ä –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        
        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            interval_seconds: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö  
            max_iterations: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (None = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
            locations_filter: –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ COVID-19")
        print(f"   –¢–æ–ø–∏–∫: {topic}")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"   –ú–∞–∫—Å –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations or '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ'}")
        print(f"   –§–∏–ª—å—Ç—Ä –ª–æ–∫–∞—Ü–∏–π: {locations_filter or '–≤—Å–µ'}")
        
        iteration = 0
        
        try:
            while max_iterations is None or iteration < max_iterations:
                iteration += 1
                start_time = time.time()
                
                print(f"\n--- –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ({datetime.now().strftime('%H:%M:%S')}) ---")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á
                sent_count = self.send_daily_data_batch(
                    topic=topic,
                    batch_size=batch_size,
                    locations_filter=locations_filter
                )
                
                elapsed_time = time.time() - start_time
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f}s")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if max_iterations is None or iteration < max_iterations:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(interval_seconds)
                    
        except KeyboardInterrupt:
            print(f"\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥—å—é—Å–µ—Ä–µ: {e}")
        finally:
            self.close()
    
    def run_cumulative_producer(self, 
                                topic: str = 'covid_cumulative_5min',
                                batch_size: int = 5, 
                                interval_seconds: int = 300,
                                max_iterations: int = None,
                                locations_filter: List[str] = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–¥—å—é—Å–µ—Ä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        
        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            interval_seconds: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_iterations: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (None = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
            locations_filter: –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö COVID-19")
        print(f"   –¢–æ–ø–∏–∫: {topic}")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"   –ú–∞–∫—Å –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations or '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ'}")
        print(f"   –§–∏–ª—å—Ç—Ä –ª–æ–∫–∞—Ü–∏–π: {locations_filter or '–≤—Å–µ'}")
        
        iteration = 0
        
        try:
            while max_iterations is None or iteration < max_iterations:
                iteration += 1
                start_time = time.time()
                
                print(f"\n--- –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ({datetime.now().strftime('%H:%M:%S')}) ---")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á
                sent_count = self.send_cumulative_data_batch(
                    topic=topic,
                    batch_size=batch_size,
                    locations_filter=locations_filter
                )
                
                elapsed_time = time.time() - start_time
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f}s")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if max_iterations is None or iteration < max_iterations:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(interval_seconds)
                    
        except KeyboardInterrupt:
            print(f"\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥—å—é—Å–µ—Ä–µ: {e}")
        finally:
            self.close()
    
    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞"""
        return {
            'total_records': len(self.data_source),
            'current_index': self.data_index,
            'broker_url': self.broker_url,
            'use_real_data': self.use_real_data
        }
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–¥—å—é—Å–µ—Ä"""
        if hasattr(self, 'producer'):
            self.producer.flush()
            self.producer.close()
            print("üîí –ü—Ä–æ–¥—å—é—Å–µ—Ä –∑–∞–∫—Ä—ã—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="COVID-19 Kafka Producer")
    
    parser.add_argument("--type", 
                        choices=['daily', 'cumulative'], 
                        required=True,
                        help="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    parser.add_argument("--broker", 
                        default='kafka:9092',
                        help="URL Kafka –±—Ä–æ–∫–µ—Ä–∞")
    
    parser.add_argument("--batch-size", 
                        type=int, 
                        default=10,
                        help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    parser.add_argument("--interval", 
                        type=int, 
                        default=60,
                        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    parser.add_argument("--iterations", 
                        type=int,
                        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")
    
    parser.add_argument("--real-data", 
                        action='store_true',
                        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ COVID-19")
    
    parser.add_argument("--data-limit", 
                        type=int, 
                        default=1000,
                        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
    
    parser.add_argument("--locations",
                        nargs='+',
                        help="–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–¥–∞–º –ª–æ–∫–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: US GB DE)")
    
    parser.add_argument("--topic-daily", 
                        default='covid_daily_1min',
                        help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤")
    
    parser.add_argument("--topic-cumulative", 
                        default='covid_cumulative_5min',
                        help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä
    producer = CovidDataProducer(
        broker_url=args.broker,
        use_real_data=args.real_data,
        data_limit=args.data_limit
    )
    
    try:
        if args.type == 'daily':
            # –ü—Ä–æ–¥—å—é—Å–µ—Ä –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
            producer.run_daily_producer(
                topic=args.topic_daily,
                batch_size=args.batch_size,
                interval_seconds=args.interval,
                max_iterations=args.iterations,
                locations_filter=args.locations
            )
        else:
            # –ü—Ä–æ–¥—å—é—Å–µ—Ä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            producer.run_cumulative_producer(
                topic=args.topic_cumulative,
                batch_size=args.batch_size,
                interval_seconds=args.interval,
                max_iterations=args.iterations,
                locations_filter=args.locations
            )
    finally:
        producer.close()

if __name__ == "__main__":
    main()