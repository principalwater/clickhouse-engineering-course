import sys
import os
sys.path.append('/opt/airflow')

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import Variable
from utils.covid_producer import CovidDataProducer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è DAG
default_args = {
    'owner': 'hw17-covid-new-cases',
    'depends_on_past': False,
    'start_date': datetime(2025, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=1),
    'max_active_runs': 1,  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
}

def produce_new_cases_data(**context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ COVID-19 –≤ Kafka —Ç–æ–ø–∏–∫ covid_new_cases_1min,
    –∏—Å–ø–æ–ª—å–∑—É—è "–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫" (watermark) –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        params = context.get('params', {})
        broker_url = params.get('broker_url', 'kafka:9092')
        batch_size = params.get('batch_size', 8)
        topic = params.get('topic', 'covid_new_cases_1min')
        use_real_data = params.get('use_real_data', False)
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        locations_filter = params.get('locations_filter', context['dag'].params.get('locations_filter'))

        # --- –õ–æ–≥–∏–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö) ---
        last_processed_date = None
        last_date_variable_name = f"{context['dag'].dag_id}_last_date"
        if use_real_data:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1: —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã
            manual_watermark = params.get('initial_watermark_date')
            if manual_watermark:
                print(f"   üíß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π Watermark, –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {manual_watermark}")
                last_processed_date = manual_watermark
            else:
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ2: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ Airflow Variable
                last_processed_date = Variable.get(last_date_variable_name, default_var=None)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ COVID-19")
        print(f"   Broker: {broker_url}")
        print(f"   Topic: {topic}")
        print(f"   Batch size: {batch_size}")
        print(f"   Real data: {use_real_data}")
        print(f"   Locations filter: {locations_filter}")
        if use_real_data and last_processed_date:
            print(f"   üíß Watermark (–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –¥–∞—Ç—ã): {last_processed_date}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä
        producer = CovidDataProducer(
            broker_url=broker_url,
            use_real_data=use_real_data,
            data_limit=2000,  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–∏–∫–ª–∏—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            start_date=last_processed_date, # –ë—É–¥–µ—Ç None, –µ—Å–ª–∏ use_real_data=False
            locations_filter=locations_filter if use_real_data else None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
        sent_count, max_date_in_batch = producer.send_daily_data_batch(
            topic=topic,
            batch_size=batch_size,
            locations_filter=locations_filter
        )
        
        stats = producer.get_stats()
        producer.close()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫ {topic}")
        
        # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "–≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞" (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö) ---
        if use_real_data and max_date_in_batch and max_date_in_batch != last_processed_date:
            print(f"   üíß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Watermark –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É: {max_date_in_batch}")
            Variable.set(last_date_variable_name, max_date_in_batch)
        elif use_real_data:
            print(f"   üíß Watermark –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ({last_processed_date}). –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")

        return {
            'sent_count': sent_count,
            'topic': topic,
            'batch_size': batch_size,
            'data_type': 'new_cases',
            'timestamp': datetime.now().isoformat(),
            'locations_count': len(locations_filter) if locations_filter else 0,
            'producer_stats': stats,
            'broker_url': broker_url,
            'last_processed_date': last_processed_date,
            'new_watermark': max_date_in_batch
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥—å—é—Å–µ—Ä–µ –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ COVID-19: {e}")
        raise

def check_topic_availability(**context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞ covid_new_cases_1min –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    from kafka import KafkaProducer
    from kafka.errors import NoBrokersAvailable
    
    broker_url = context.get('params', {}).get('broker_url', 'kafka:9092')
    topic = context.get('params', {}).get('topic', 'covid_new_cases_1min')
    
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ø–∏–∫–∞ {topic}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        producer = KafkaProducer(
            bootstrap_servers=[broker_url],
            request_timeout_ms=5000,
            api_version=(0, 10, 1)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–ø–æ—Å–æ–±)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ KafkaAdminClient
            from kafka import KafkaAdminClient
            admin_client = KafkaAdminClient(
                bootstrap_servers=[broker_url],
                request_timeout_ms=5000,
                api_version=(0, 10, 1)
            )
            metadata = admin_client.list_topics()
            available_topics = list(metadata)
            admin_client.close()
        except Exception:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ consumer
            from kafka import KafkaConsumer
            consumer = KafkaConsumer(
                bootstrap_servers=[broker_url],
                request_timeout_ms=5000,
                api_version=(0, 10, 1)
            )
            available_topics = list(consumer.topics())
            consumer.close()
        
        producer.close()
        
        topic_available = topic in available_topics
        
        if topic_available:
            print(f"‚úÖ –¢–æ–ø–∏–∫ {topic} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
        else:
            print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ {topic} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø–∏–∫–∏: {available_topics}")
        
        return {
            'topic': topic,
            'topic_available': topic_available,
            'available_topics': available_topics,
            'broker_url': broker_url,
            'check_status': 'success' if topic_available else 'warning'
        }
        
    except NoBrokersAvailable:
        print(f"‚ùå Kafka –±—Ä–æ–∫–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {broker_url}")
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ø–∏–∫–∞: {e}")
        raise

# –°–æ–∑–¥–∞–Ω–∏–µ DAG
dag = DAG(
    'covid_new_cases_1min',
    default_args=default_args,
    description='–ü—Ä–æ–¥—å—é—Å–µ—Ä –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ COVID-19 –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É',
    schedule="* * * * *",  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ :00 —Å–µ–∫—É–Ω–¥
    catchup=False,
    max_active_runs=1,
    tags=['covid19', 'kafka', 'producer', 'new-cases', '1min', 'hw17'],
    params={
        'broker_url': 'kafka:9092',
        'topic': 'covid_new_cases_1min', 
        'batch_size': 8,
        'use_real_data': False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        'locations_filter': ['US', 'GB', 'DE', 'FR', 'IT', 'ES', 'RU', 'CN', 'JP', 'KR'],
        'initial_watermark_date': None, # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –¥–∞—Ç—É (YYYY-MM-DD) –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    },
    doc_md="""
    ## COVID-19 New Cases Producer DAG (1min)
    
    –ü—Ä–æ–¥—å—é—Å–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞—è—Ö COVID-19 –≤ Kafka —Ç–æ–ø–∏–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
    
    ### –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
    - **date**: –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    - **location_key**: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: US, GB, DE)
    - **new_confirmed**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    - **new_deceased**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤  
    - **new_recovered**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö
    - **new_tested**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    
    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **broker_url**: –∞–¥—Ä–µ—Å Kafka –±—Ä–æ–∫–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kafka:9092)
    - **topic**: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: covid_new_cases_1min)
    - **batch_size**: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8 —Å–æ–æ–±—â–µ–Ω–∏–π)
    - **use_real_data**: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ COVID-19 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: False)
    - **locations_filter**: —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    - **initial_watermark_date**: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É (YYYY-MM-DD) –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä—É—á–Ω—É—é. –ò–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–º.

    ### –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (Watermark):
    –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (`use_real_data: true`), DAG –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç
    –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é Airflow Variable `covid_new_cases_1min_last_date`.
    –ü—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –æ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–≤–µ–µ —ç—Ç–æ–π –¥–∞—Ç—ã,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    
    ### –ü—Ä–∏–º–µ—Ä JSON —Å–æ–æ–±—â–µ–Ω–∏—è:
    ```json
    {
        "date": "2020-03-15",
        "location_key": "US",
        "new_confirmed": 1234,
        "new_deceased": 45,
        "new_recovered": 567,
        "new_tested": 12340
    }
    ```
    """
)

# –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ø–∏–∫–∞
check_topic_task = PythonOperator(
    task_id='check_topic_availability',
    python_callable=check_topic_availability,
    dag=dag,
    doc_md="""
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞ covid_new_cases_1min –≤ Kafka –∫–ª–∞—Å—Ç–µ—Ä–µ.
    –ï—Å–ª–∏ —Ç–æ–ø–∏–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–¥–∞—á–∞ –≤—ã–≤–µ–¥–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ —É–ø–∞–¥–µ—Ç.
    """
)

# –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
produce_task = PythonOperator(
    task_id='produce_new_cases_data',
    python_callable=produce_new_cases_data,
    dag=dag,
    doc_md="""
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞—è—Ö COVID-19 –≤ Kafka —Ç–æ–ø–∏–∫.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CovidDataProducer –¥–ª—è:
    1. –ó–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö COVID-19 (—Ä–µ–∞–ª—å–Ω—ã—Ö –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö)
    2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º/—Ä–µ–≥–∏–æ–Ω–∞–º
    3. –û—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤ Kafka
    4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
check_topic_task >> produce_task
