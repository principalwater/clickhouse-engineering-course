from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from kafka.admin import KafkaAdminClient, NewTopic
from kafka.errors import TopicAlreadyExistsError, KafkaError
import json
import os
from dotenv import load_dotenv

# Load environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), '../../infra/env/clickhouse.env')
load_dotenv(dotenv_path=dotenv_path)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ DAG
default_args = {
    'owner': 'kafka-topics',
    'depends_on_past': False,
    'start_date': datetime(2025, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=2),
}

# –°–æ–∑–¥–∞–Ω–∏–µ DAG –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ Kafka
kafka_topic_dag = DAG(
    'kafka_topic_create',
    default_args=default_args,
    description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ Kafka –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
    schedule=None,  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    catchup=False,
    tags=['kafka', 'topics', 'create', 'universal'],
)

def get_topic_config(**context):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ DAG"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ DAG
        dag_run = context['dag_run']
        conf = dag_run.conf if dag_run else {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞
        default_config = {
            'topic_name': 'covid_new_cases_1min',
            'partitions': 3,
            'replication_factor': 1,
            'retention_ms': 86400000,  # 1 –¥–µ–Ω—å
            'cleanup_policy': 'delete',
            'compression_type': 'snappy',
            'description': 'Default COVID-19 new cases topic',
            'schema_description': {
                'date': 'Date in YYYY-MM-DD format',
                'location_key': 'Country/region code',
                'new_confirmed': 'New confirmed cases',
                'new_deceased': 'New deaths',
                'new_recovered': 'New recoveries',
                'new_tested': 'New tests performed'
            },
            'kafka_broker': 'kafka:9092',
            'recreate_topic': False  # –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ø–∏–∫ (—É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        config = {**default_config, **conf}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        required_fields = ['topic_name', 'partitions', 'replication_factor']
        missing_fields = []
        
        for field in required_fields:
            if field not in config or config[field] is None:
                missing_fields.append(field)
        
        if missing_fields:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_fields}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        if config['partitions'] < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1")
        
        if config['replication_factor'] < 1:
            raise ValueError("Replication factor –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1")
        
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ø–∏–∫–∞:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {config['topic_name']}")
        print(f"   –ü–∞—Ä—Ç–∏—Ü–∏–∏: {config['partitions']}")
        print(f"   Replication Factor: {config['replication_factor']}")
        print(f"   Retention: {config['retention_ms']} –º—Å")
        print(f"   Cleanup Policy: {config['cleanup_policy']}")
        print(f"   Compression: {config['compression_type']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {config['description']}")
        print(f"   Kafka Broker: {config['kafka_broker']}")
        print(f"   –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ: {config.get('recreate_topic', False)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ XCom –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö
        context['task_instance'].xcom_push(key='topic_config', value=config)
        
        return config
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")
        raise

def check_kafka_connection(**context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka"""
    try:
        config = context['task_instance'].xcom_pull(task_ids='get_topic_config', key='topic_config')
        
        if not config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ø–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        admin_client = KafkaAdminClient(
            bootstrap_servers=[config['kafka_broker']],
            request_timeout_ms=10000,
            api_version=(0, 10, 1)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
        metadata = admin_client.list_topics()
        broker_count = len(admin_client._client.cluster.brokers())
        
        admin_client.close()
        
        print(f"‚úÖ Kafka –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–æ–∫–µ—Ä—ã: {broker_count}")
        print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤: {len(metadata)}")
        
        return {
            'broker_url': config['kafka_broker'],
            'brokers_count': broker_count,
            'existing_topics_count': len(metadata),
            'connection_status': 'success'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka: {e}")
        raise

def check_topic_exists(**context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞"""
    try:
        config = context['task_instance'].xcom_pull(task_ids='get_topic_config', key='topic_config')
        
        if not config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ø–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        topic_name = config['topic_name']
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {topic_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_client = KafkaAdminClient(
            bootstrap_servers=[config['kafka_broker']],
            request_timeout_ms=10000,
            api_version=(0, 10, 1)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤
        existing_topics = admin_client.list_topics()
        
        admin_client.close()
        
        topic_exists = topic_name in existing_topics
        
        if topic_exists:
            print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ {topic_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚úÖ –¢–æ–ø–∏–∫ {topic_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å")
        
        result = {
            'topic_name': topic_name,
            'topic_exists': topic_exists,
            'existing_topics': existing_topics,
            'total_topics': len(existing_topics)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ XCom
        context['task_instance'].xcom_push(key='topic_check_result', value=result)
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
        raise

def create_kafka_topic(**context):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ Kafka"""
    try:
        config = context['task_instance'].xcom_pull(task_ids='get_topic_config', key='topic_config')
        check_result = context['task_instance'].xcom_pull(task_ids='check_topic_exists', key='topic_check_result')
        
        if not config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ø–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if not check_result:
            raise ValueError("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ø–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        topic_name = config['topic_name']
        recreate_topic = config.get('recreate_topic', False)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç–æ–ø–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if check_result['topic_exists']:
            if recreate_topic:
                print(f"üî• –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_name} (—É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_client = KafkaAdminClient(
                    bootstrap_servers=[config['kafka_broker']],
                    request_timeout_ms=30000,
                    api_version=(0, 10, 1)
                )
                
                try:
                    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ —á–µ—Ä–µ–∑ kafka-topics –∫–æ–º–∞–Ω–¥—É
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_name}...")
                    
                    import subprocess
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º kafka-topics –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    delete_cmd = [
                        'docker', 'exec', 'kafka', 
                        'kafka-topics', '--delete', 
                        '--topic', topic_name,
                        '--bootstrap-server', 'localhost:9092'
                    ]
                    
                    result = subprocess.run(
                        delete_cmd, 
                        capture_output=True, 
                        text=True, 
                        timeout=30
                    )
                    
                    if result.returncode == 0:
                        print(f"‚úÖ –¢–æ–ø–∏–∫ {topic_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        print(f"üìÑ –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: {result.stdout.strip()}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {topic_name}")
                        print(f"üìÑ Stderr: {result.stderr.strip()}")
                        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫ {topic_name}: {result.stderr}")
                    
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ (5 —Å–µ–∫—É–Ω–¥)...")
                    import time
                    time.sleep(5)  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    
                except subprocess.TimeoutExpired:
                    print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {topic_name}")
                    raise RuntimeError(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {topic_name}")
                except Exception as deletion_error:
                    print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {deletion_error}")
                    raise
                finally:
                    admin_client.close()
                    
                print(f"üÜï –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞ {topic_name}")
            else:
                print(f"‚úÖ –¢–æ–ø–∏–∫ {topic_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return {
                    'status': 'exists',
                    'topic_name': topic_name,
                    'message': f'–¢–æ–ø–∏–∫ {topic_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    'created': False,
                    'existing': True
                }
        
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞: {topic_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_client = KafkaAdminClient(
            bootstrap_servers=[config['kafka_broker']],
            request_timeout_ms=30000,
            api_version=(0, 10, 1)
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ø–∏–∫–∞
        topic_configs = {
            'retention.ms': str(config['retention_ms']),
            'cleanup.policy': config['cleanup_policy'],
            'compression.type': config['compression_type']
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–ø–∏–∫–∞
        topic = NewTopic(
            name=topic_name,
            num_partitions=config['partitions'],
            replication_factor=config['replication_factor'],
            topic_configs=topic_configs
        )
        
        print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —Ç–æ–ø–∏–∫–∞:")
        print(f"   –ü–∞—Ä—Ç–∏—Ü–∏–∏: {config['partitions']}")
        print(f"   Replication Factor: {config['replication_factor']}")
        print(f"   Retention: {config['retention_ms']} –º—Å")
        print(f"   Cleanup Policy: {config['cleanup_policy']}")
        print(f"   Compression: {config['compression_type']}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫
            future_response = admin_client.create_topics([topic])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
            for topic_name_result, error_code in future_response.topic_errors:
                if error_code == 0:
                    print(f"‚úÖ –¢–æ–ø–∏–∫ {topic_name_result} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                    
                    admin_client.close()
                    
                    return {
                        'status': 'created',
                        'topic_name': topic_name_result,
                        'message': f'–¢–æ–ø–∏–∫ {topic_name_result} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
                        'created': True,
                        'existing': False,
                        'partitions': config['partitions'],
                        'replication_factor': config['replication_factor'],
                        'config': topic_configs
                    }
                elif error_code == 36: # TOPIC_ALREADY_EXISTS
                    print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ {topic_name_result} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (race condition)")
                    admin_client.close()
                    
                    return {
                        'status': 'exists',
                        'topic_name': topic_name_result,
                        'message': f'–¢–æ–ø–∏–∫ {topic_name_result} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å–æ–∑–¥–∞–Ω –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)',
                        'created': False,
                        'existing': True
                    }
                else:
                    raise KafkaError(f"–û—à–∏–±–∫–∞ Kafka: {error_code})")
                    
        except TopicAlreadyExistsError:
            print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ {topic_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–µ—Ä–µ—Ö–≤–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è)")
            admin_client.close()
            return {
                'status': 'exists',
                'topic_name': topic_name,
                'message': f'–¢–æ–ø–∏–∫ {topic_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                'created': False,
                'existing': True
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")
            raise
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")
        raise

def verify_topic_creation(**context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞"""
    try:
        config = context['task_instance'].xcom_pull(task_ids='get_topic_config', key='topic_config')
        creation_result = context['task_instance'].xcom_pull(task_ids='create_kafka_topic')
        
        if not config or not creation_result:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        topic_name = config['topic_name']
        
        print(f"üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {topic_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_client = KafkaAdminClient(
            bootstrap_servers=[config['kafka_broker']],
            request_timeout_ms=10000,
            api_version=(0, 10, 1)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
        current_topics = admin_client.list_topics()
        
        admin_client.close()
        
        if topic_name in current_topics:
            print(f"‚úÖ –¢–æ–ø–∏–∫ {topic_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–ø–∏–∫–æ–≤")
            
            verification_result = {
                'verification_status': 'success',
                'topic_name': topic_name,
                'topic_found': True,
                'creation_result': creation_result,
                'total_topics': len(current_topics)
            }
        else:
            print(f"‚ùå –¢–æ–ø–∏–∫ {topic_name} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–ø–∏–∫–æ–≤")
            
            verification_result = {
                'verification_status': 'failed',
                'topic_name': topic_name,
                'topic_found': False,
                'creation_result': creation_result,
                'total_topics': len(current_topics),
                'current_topics': current_topics
            }
            
            raise Exception(f"–¢–æ–ø–∏–∫ {topic_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        return verification_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")
        raise

def generate_topic_summary(**context):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞"""
    try:
        config = context['task_instance'].xcom_pull(task_ids='get_topic_config', key='topic_config')
        creation_result = context['task_instance'].xcom_pull(task_ids='create_kafka_topic')
        verification_result = context['task_instance'].xcom_pull(task_ids='verify_topic_creation')
        
        print(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞")
        print(f"=" * 50)
        
        if config:
            print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {config['topic_name']}")
            print(f"  –ü–∞—Ä—Ç–∏—Ü–∏–∏: {config['partitions']}")
            print(f"  Replication Factor: {config['replication_factor']}")
            print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {config['description']}")
        
        if creation_result:
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:")
            print(f"  –°—Ç–∞—Ç—É—Å: {creation_result['status']}")
            print(f"  –°–æ–∑–¥–∞–Ω: {creation_result['created']}")
            print(f"  –°—É—â–µ—Å—Ç–≤–æ–≤–∞–ª: {creation_result['existing']}")
            print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {creation_result['message']}")
        
        if verification_result:
            print(f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:")
            print(f"  –°—Ç–∞—Ç—É—Å: {verification_result['verification_status']}")
            print(f"  –¢–æ–ø–∏–∫ –Ω–∞–π–¥–µ–Ω: {verification_result['topic_found']}")
        
        print(f"=" * 50)
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return {
            'summary': {
                'topic_name': config['topic_name'],
                'operation_status': 'success',
                'creation_status': creation_result['status'],
                'verification_status': verification_result['verification_status'],
                'config': config,
                'creation_result': creation_result,
                'verification_result': verification_result
            }
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        raise

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
get_config_task = PythonOperator(
    task_id='get_topic_config',
    python_callable=get_topic_config,
    dag=kafka_topic_dag,
)

check_connection_task = PythonOperator(
    task_id='check_kafka_connection',
    python_callable=check_kafka_connection,
    dag=kafka_topic_dag,
)

check_exists_task = PythonOperator(
    task_id='check_topic_exists',
    python_callable=check_topic_exists,
    dag=kafka_topic_dag,
)

create_topic_task = PythonOperator(
    task_id='create_kafka_topic',
    python_callable=create_kafka_topic,
    dag=kafka_topic_dag,
)

verify_creation_task = PythonOperator(
    task_id='verify_topic_creation',
    python_callable=verify_topic_creation,
    dag=kafka_topic_dag,
)

generate_summary_task = PythonOperator(
    task_id='generate_topic_summary',
    python_callable=generate_topic_summary,
    dag=kafka_topic_dag,
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
get_config_task >> check_connection_task >> check_exists_task >> create_topic_task >> verify_creation_task >> generate_summary_task