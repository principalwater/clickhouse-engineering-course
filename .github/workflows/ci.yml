name: Terraform & Python Lint CI

on:
  workflow_dispatch: {}           # Manual trigger from any branch for testing.
  pull_request:
    branches:
      - master                    # Automatic check on PR creation targeting master.
  push:
    branches:
      - master                    # Automatic check after merge to master.

jobs:
  find-terraform-dirs:
    runs-on: ubuntu-latest
    outputs:
      tf_dirs: ${{ steps.set-dirs.outputs.tf_dirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find Terraform directories
        id: set-dirs
        run: |
          # Find all directories containing main.tf files, excluding those ignored by .gitignore.
          mapfile -t dirs < <(find . -type f -name 'main.tf' \
            | grep -vFf <(git check-ignore $(find . -type f -name 'main.tf') 2>/dev/null || true) \
            | xargs -I {} dirname {} | sort -u)
          echo "Found Terraform directories:"
          printf '%s\n' "${dirs[@]}"
          clean_dirs=()
          for d in "${dirs[@]}"; do
            d_clean=$(echo "$d" | xargs)
            [ -n "$d_clean" ] && clean_dirs+=("$d_clean")
          done
          printf '%s\n' "${clean_dirs[@]}" | jq -R . | jq -s . | tr -d ' \n' > tf_dirs.json
          echo "tf_dirs=$(cat tf_dirs.json)" >> $GITHUB_OUTPUT

      - name: Inspect tf_dirs.json
        run: |
          # Display the contents of tf_dirs.json for verification.
          echo "[INSPECT] Contents of tf_dirs.json:"
          cat tf_dirs.json

  terraform:
    needs: find-terraform-dirs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.find-terraform-dirs.outputs.tf_dirs) }}
    defaults:
      run:
        shell: bash
    env:
      BI_PASSWORD: ${{ secrets.BI_PASSWORD }}
      BI_USER_PASSWORD: ${{ secrets.BI_USER_PASSWORD }}
      CLICKHOUSE_BI_USER_PASSWORD: ${{ secrets.CLICKHOUSE_BI_USER_PASSWORD }}
      CLICKHOUSE_SUPER_USER_PASSWORD: ${{ secrets.CLICKHOUSE_SUPER_USER_PASSWORD }}
      MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
      MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      REMOTE_SSH_USER: ${{ secrets.REMOTE_SSH_USER }}
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
      SA_USERNAME: ${{ secrets.SA_USERNAME }}
      SUPERSET_SECRET_KEY: ${{ secrets.SUPERSET_SECRET_KEY }}
      SUPER_USER_PASSWORD: ${{ secrets.SUPER_USER_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Load sensitive variables from variables.tf
        id: load-vars
        run: |
           set +e  # Disable immediate exit to allow debugging errors.
           VARS=""
           if [ -f "${{ matrix.dir }}/variables.tf" ]; then
             sensitive_no_default=()
             all_no_default=()
             # Extract sensitive variables without default values.
             while read -r var; do
               sensitive_no_default+=("$var")
             done < <(awk '
               BEGIN { var=""; sensitive=0; has_default=0; }
               /variable / { if (var && sensitive && !has_default) print var; var=$2; sensitive=0; has_default=0; }
               /sensitive *= *true/ { sensitive=1; }
               /default *=/ { has_default=1; }
               END { if (var && sensitive && !has_default) print var; }
             ' "${{ matrix.dir }}/variables.tf" | tr -d '"{}')
             # Extract all variables without default values.
             while read -r var; do
               all_no_default+=("$var")
             done < <(awk '
               BEGIN { var=""; has_default=0; }
               /variable / { if (var && !has_default) print var; var=$2; has_default=0; }
               /default *=/ { has_default=1; }
               END { if (var && !has_default) print var; }
             ' "${{ matrix.dir }}/variables.tf" | tr -d '"{}')
             # Combine lists and remove duplicates.
             combined=()
             declare -A seen=()
             for v in "${sensitive_no_default[@]}" "${all_no_default[@]}"; do
               if [ -z "${seen[$v]}" ]; then
                 combined+=("$v")
                 seen[$v]=1
               fi
             done
             for var in "${combined[@]}"; do
               env_name=$(env | grep -i "^${var}=" | cut -d= -f1 | head -n1 || true)
               if [ -z "$env_name" ]; then
                 env_name=$(env | grep -i "^$(echo "$var" | tr '[:lower:]' '[:upper:]')=" | cut -d= -f1 | head -n1 || true)
               fi
               if [ -n "$env_name" ]; then
                 val=$(printenv "$env_name" || true)
                 VARS="$VARS -var=$var=\"$val\""
               fi
             done
           fi
           echo "[LOAD VARS] Loaded variables: $VARS"
           echo "vars=$VARS" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          set -ex  # Enable detailed output and stop on errors.
          echo "[TF INIT] Running terraform init in ${{ matrix.dir }}"  # Before init.
          terraform init -backend=false
          echo "[TF INIT] Completed terraform init"  # After init.
        working-directory: ${{ matrix.dir }}

      - name: Terraform Validate
        run: |
          set -ex  # Enable detailed output and stop on errors.
          echo "[TF VALIDATE] Running terraform validate in ${{ matrix.dir }}"  # Before validate.
          terraform validate
          echo "[TF VALIDATE] Completed terraform validate"  # After validate.
        working-directory: ${{ matrix.dir }}

      - name: Terraform Format Check
        run: |
          set -ex  # Enable detailed output and stop on errors.
          echo "[TF FMT] Running terraform fmt -check in ${{ matrix.dir }}"  # Before fmt.
          terraform fmt -check
          echo "[TF FMT] Completed terraform fmt -check"  # After fmt.
        working-directory: ${{ matrix.dir }}

      - name: Terraform Plan
        run: |
          set -ex  # Enable detailed output and stop on errors.
          echo "[TF PLAN] Running terraform plan in ${{ matrix.dir }}"  # Before plan.
          
          # CI-specific overrides for ch_with_storage to avoid local network dependencies
          if [[ "${{ matrix.dir }}" == *"ch_with_storage"* ]]; then
            echo "[TF PLAN] Applying CI overrides for ch_with_storage module"
            terraform plan -out=tfplan ${{ steps.load-vars.outputs.vars }} \
              -var="storage_type=local_ssd" \
              -var="enable_remote_backup=false" \
              -var="remote_host_name=localhost" \
              -var="local_minio_path=/tmp/ci-minio" \
              -var="remote_minio_path=/tmp/ci-remote-minio"
          else
            terraform plan -out=tfplan ${{ steps.load-vars.outputs.vars }}
          fi
          
          terraform show -no-color tfplan > plan.txt
          echo "[TF PLAN] Completed terraform plan and saved plan.txt"  # After plan.
        working-directory: ${{ matrix.dir }}

      - name: Sanitize artifact name
        id: sanitize
        run: |
          dir="${{ matrix.dir }}"
          dir_sanitized=$(echo "$dir" | sed 's#^\./##' | tr '/.' '-' )
          echo "dir_sanitized=$dir_sanitized" >> $GITHUB_OUTPUT

      - name: Upload Terraform plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ steps.sanitize.outputs.dir_sanitized }}
          path: ${{ matrix.dir }}/plan.txt

  python-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Find and check Python scripts syntax
        run: |
          # Find all .py files not ignored by .gitignore and excluding private config files.
          git ls-files '*.py' ':!:additional/bi-infra/**/superset_config.py' ':!:additional/bi-infra/**/*config.py' ':!:additional/bi-infra/**/*secret.py' \
            | while read -r file; do
                echo "Checking syntax: $file"
                python -m py_compile "$file"
              done

      - name: Find and check shell script syntax
        run: |
          # Find all shell scripts (.sh) not ignored by .gitignore and validate syntax with 'bash -n'.
          # Fail the job if any script has syntax errors to prevent issues during CI.
          git ls-files '*.sh' | while read -r file; do
            echo "Checking syntax: $file"
            bash -n "$file"
          done
